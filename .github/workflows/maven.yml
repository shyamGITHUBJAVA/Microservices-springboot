# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: ci/cd pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn clean package

      - name: Build & push Docker image
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: shyam583/service-inventory
          tags: latest
          registry: docker.io
          dockerfile: service-inventory/Dockerfile
          context: service-inventory
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Ensure Minikube is running
        shell: powershell
        run: |
          $status = minikube status
          if ($status -notmatch "Running") {
            Write-Host "Minikube not running, starting it..."
            minikube start --driver=docker
          } else {
            Write-Host "Minikube already running."
          }
          kubectl config use-context minikube  

      - name: Update Kubernetes Deployment
        run: |
          kubectl set image deployment/springboot-example springboot-example=shyam583/service-inventory:latest || \
          (kubectl create deployment springboot-example --image=shyam583/service-inventory:latest && \
          kubectl expose deployment springboot-example --type=NodePort --port=8082 --target-port=8082)

      - name: Show Service URL
        run: minikube service springboot-example --url
